// sass --watch main.scss:main.css
// variables
$width: 400px;          // the width of the whole board
$tile-count: 4;         // the number of tiles per row/col
$tile-padding: 15px;    // the padding between tiles
$tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;
$zeroOffsetX: 0;
$zeroOffsetY: 0;
$newX: 0;
$newY: 0;
$colors:  #EEE4DA, // 2
          #EAE0C8, // 4
          #F59563, // 8
          #3399ff, // 16
          #ffa333, // 32
          #cef030, // 64
          #E8D8CE, // 128
          #990303, // 256
          #6BA5DE, // 512
          #DCAD60, // 1024
          #B60022; // 2048


// mixin
@function power ($x, $n) {
    $ret: 1;

    @if $n >= 0 {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        } 
    } @else {
        @for $i from $n to 0 {
            $ret: $ret / $x;
        }
    }

    @return $ret;
}

.box {
    width:40px;
    height:40px;
    background-color: blue;
}

.box.transformed {
    -webkit-transform: translateX(300px);
    transform: translateX(300px);
}

#game {
    position: relative;
    width: $width;
    height: $width; // The gameboard is a square

    .grid-container {
        position: absolute;   // the grid is absolutely positioned
        z-index: 1;           // IMPORTANT to set the z-index for layering
        margin: 0 auto;       // center

        .grid-cell {
            width: $tile-size;              // set the cell width
            height: $tile-size;             // set the cell height
            margin-bottom: $tile-padding;   // the padding between lower cells
            margin-right: $tile-padding;    // the padding between the right cell
        }
    }
    
    .tile-container {
        position: absolute;
        z-index: 2;

        .tile {
            width: $tile-size;        // tile width
            height: $tile-size;       // tile height
        }
    }
}

.tile {
    @for $x from 1 through $tile-count {
        @for $y from 1 through $tile-count {
            $zeroOffsetX: $x - 1;
            $zeroOffsetY: $y - 1;
            $newX: ($tile-size) * ($zeroOffsetX) + ($tile-padding * $zeroOffsetX);
            $newY: ($tile-size) * ($zeroOffsetY) + ($tile-padding * $zeroOffsetY);
            
            &.position-#{$zeroOffsetX}-#{$zeroOffsetY} {
                -webkit-transform: translate($newX, $newY);
                transform: translate($newX, $newY);
            }
        }
    }
}

@for $i from 1 through length($colors) {
    .tile-#{power(2,$i)} .tile-inner {
        background: nth($colors, $i);
    }
}